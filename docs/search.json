[
  {
    "objectID": "homework4qmd.html",
    "href": "homework4qmd.html",
    "title": "Homework 4 - ST558",
    "section": "",
    "text": "In this document, we will be writing functions and dealing with missing values. We will start by answering conceptual questions about this weeks lecture material."
  },
  {
    "objectID": "homework4qmd.html#task-1-conceptual-questions",
    "href": "homework4qmd.html#task-1-conceptual-questions",
    "title": "Homework 4 - ST558",
    "section": "Task 1: Conceptual Questions",
    "text": "Task 1: Conceptual Questions\n\nWhat is the purpose of the lapply() function? What is the equivalent purrr function?\n&gt; The purpose of the lapply() function is to apply a function to each element in a list. The equivalent purrr function is the map() function\nSuppose we have a list called my_list. Each element of the list is a numeric data frame (all columns are numeric). We want use lapply() to run the code cor(numeric_matrix, method = “kendall”) on each element of the list. Write code to do this below! (I’m really trying to ask you how you specify method = “kendall” when calling lapply())\n&gt; lapply(numeric_namtrix = my_list, method = “kendall”)\nWhat are two advantages of using purrr functions instead of the BaseR apply family?\n&gt; The purrr functions have common function names and syntax across functions.\nWhat is a side-effect function?\n&gt; A side-effect function is a function that doesn’t change anything it just creates output.\nWhy can you name a variable sd in a function and not cause any issues with the sd function?\n&gt; Inside the function when we call it, there is a temporary function environment which is then destroyed after running the funciton."
  },
  {
    "objectID": "homework4qmd.html#task-2-writing-r-functions",
    "href": "homework4qmd.html#task-2-writing-r-functions",
    "title": "Homework 4 - ST558",
    "section": "Task 2: Writing R Functions",
    "text": "Task 2: Writing R Functions\nFirst, we will write a function that finds the RMSE of a response vector and a respective predictions vector.\n\n# I will be adding ... into the function to apply other arguments after the fact. \ngetRMSE &lt;- function(responses, predictions,...){\n  RMSE &lt;- sqrt(mean((responses - predictions)^2,...))\n  return(RMSE)\n}\n\nNow, I will test the function after creating data with no missing values.\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\ngetRMSE(responses = resp, predictions = pred)\n\n[1] 0.9581677\n\n\nNow, I will test the function after creating a vector “resp_NA” which contains missing values.\n\nresp_NA &lt;- c(resp[1:98],NA_real_,NA_real_)\n# First we will apply the function without removing the missing values to verify an error. \ngetRMSE(responses = resp_NA, predictions = pred)\n\n[1] NA\n\n# Then we will apply the function with specifying, na.rm = TRUE to remove the missing values.\ngetRMSE(responses = resp_NA, predictions = pred, na.rm = TRUE)\n\n[1] 0.9605\n\n\nNow we will be writing a function to calculate the MAE of a response vector and a respective predictions vector.\n\n# I will be adding ... into the function to apply other arguments after the fact. \ngetMAE &lt;- function(responses, predictions, ...){\n  RMSE &lt;- mean(abs(responses - predictions),...)\n  return(RMSE)\n}\n\nNow I will test the getMAE function:\n\ngetMAE(responses = resp, predictions = pred)\n\n[1] 0.8155776\n\n\nNow I will test the getMAE function with missing data.\n\n# First we will apply the function without removing the missing values to verify an error. \ngetMAE(responses = resp_NA, predictions = pred)\n\n[1] NA\n\n# Then we will apply the function with specifying, na.rm = TRUE to remove the missing values.\ngetMAE(responses = resp_NA, predictions = pred, na.rm = TRUE)\n\n[1] 0.8181006\n\n\nNow, we will create a wrapper function that calculates the RMSE and/or MAE.\n\nmy_wrapper &lt;- function(responses, predictions, get = \"both\"){\n  # First we will combine the vectors to more efficiently check for missing/incorrect data.\n  both_vectors &lt;- c(responses, predictions)\n  \n  # We will create a vector of logical objects from checking if the vectors \n  # are numerical, vectors, atomic, or missing.\n   if (FALSE %in% c(is.numeric(both_vectors), \n                    is.vector(both_vectors), \n                    is.atomic(both_vectors), \n                    !is.na(both_vectors))) {\n    stop(\"Input must be an atomic numeric vector, with no missing values.\")}\n  \nRMSE &lt;- getRMSE(responses, predictions)\nMAE &lt;- getMAE(responses, predictions)\n\n# I will use my local get object to pull any specific calculations.\n  if (get == \"both\"){\n  return(list(\"Root Mean Square Error\" = RMSE, \"Mean Absolute Deviation\" = MAE))}\n    else if (get == \"RMSE\"){\n    return(list(\"Root Mean Square Error\" = RMSE))}\n      else if (get == \"MAE\"){\n      return(list(\"Mean Absolute Deviation\" = MAE))}\n        else \n          {stop(\"For 'get' argument, specify RMSE, MAE, or both\")}\n  }\n\nNow, we will test the wrapper function. - First, we will test by calling for each metric individually.\n\nmy_wrapper(resp, pred, \"RMSE\")\n\n$`Root Mean Square Error`\n[1] 0.9581677\n\nmy_wrapper(resp, pred, \"MAE\")\n\n$`Mean Absolute Deviation`\n[1] 0.8155776\n\n\n\nNow, we will apply the function specifying both metrics to be returned:\n\n\nmy_wrapper(resp,pred, \"both\")\n\n$`Root Mean Square Error`\n[1] 0.9581677\n\n$`Mean Absolute Deviation`\n[1] 0.8155776\n\n\n\nNow we will repeat with a vector containing missing values.\n\n\nmy_wrapper(resp_NA, pred)\n\nError in my_wrapper(resp_NA, pred): Input must be an atomic numeric vector, with no missing values.\n\n\n\nNow we will apply the function to the incorrect data object (a data frame):\n\n\nresp_data_frame &lt;- data.frame(resp)\nmy_wrapper(resp_data_frame, pred)\n\nError in my_wrapper(resp_data_frame, pred): Input must be an atomic numeric vector, with no missing values."
  },
  {
    "objectID": "homework4qmd.html#task-3-querying-an-api-and-a-tidy-style-function",
    "href": "homework4qmd.html#task-3-querying-an-api-and-a-tidy-style-function",
    "title": "Homework 4 - ST558",
    "section": "Task 3: Querying an API and a Tidy-Style Function",
    "text": "Task 3: Querying an API and a Tidy-Style Function\nd042b6702b44494f8531596ad64cf58c\n\nUse GET() from the httr package to return information about a topic that you are interested in that has been in the news lately (store the result as an R object). Note: We can only look 30 days into the past with a free account.\n\n\nurl_id &lt;- \"https://newsapi.org/v2/top-headlines?country=us&category=business&apiKey=d042b6702b44494f8531596ad64cf58c\"\nid_info &lt;- httr::GET(url_id)\nstr(id_info, max.level = 1)\n\nList of 10\n $ url        : chr \"https://newsapi.org/v2/top-headlines?country=us&category=business&apiKey=d042b6702b44494f8531596ad64cf58c\"\n $ status_code: int 200\n $ headers    :List of 14\n  ..- attr(*, \"class\")= chr [1:2] \"insensitive\" \"list\"\n $ all_headers:List of 1\n $ cookies    :'data.frame':    0 obs. of  7 variables:\n $ content    : raw [1:13273] 7b 22 73 74 ...\n $ date       : POSIXct[1:1], format: \"2024-06-25 20:11:39\"\n $ times      : Named num [1:6] 0 0.18 0.21 0.284 0.403 ...\n  ..- attr(*, \"names\")= chr [1:6] \"redirect\" \"namelookup\" \"connect\" \"pretransfer\" ...\n $ request    :List of 7\n  ..- attr(*, \"class\")= chr \"request\"\n $ handle     :Class 'curl_handle' &lt;externalptr&gt; \n - attr(*, \"class\")= chr \"response\"\n\n\n\nNow we will parse what is returned and find our way to the data frame that has the actual article information in it.\n\n\nlibrary(jsonlite)\n\nWarning: package 'jsonlite' was built under R version 4.3.3\n\nparsed &lt;- fromJSON(rawToChar(id_info$content))\nheadline_info &lt;- tibble::as_tibble(parsed$articles)\n\n\nNow we will write a quick function that allows the user to easily query this API. The inputs to the function should be the title/subject to search for (string), a time period to search from (string - you’ll search from that time until the present), and an API key.\n\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.3.3\n\n\nWarning: package 'readr' was built under R version 4.3.3\n\n\nWarning: package 'lubridate' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter()  masks stats::filter()\n✖ purrr::flatten() masks jsonlite::flatten()\n✖ dplyr::lag()     masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(purrr)\n\nThis function will take in a url. If no title_keywords are specified, it returns the whole data set. If title_keywords are specified, it will search the title to find matches and filter based on those matches.\n\naccess &lt;- function(url_id, title_keywords = NULL, starting_year = 0,...){\n  id_info &lt;- httr::GET(url_id)\n  parsed &lt;- fromJSON(rawToChar(id_info$content))\n  headline_info &lt;- tibble::as_tibble(parsed$articles)\n  # if no title keywords are specified, return the whole data set.\n  if (is.null(title_keywords)){\n  return(headline_info)}\n  else {\n  \n  # lower case the title keywords and create a \n  lower_case &lt;- tolower(title_keywords)\n  vector_keywords &lt;- paste(lower_case, collapse = \"|\")\n\n   filtered &lt;- headline_info |&gt;\n    filter(grepl(vector_keywords, tolower(title)),\n           as.numeric(substr(publishedAt,1,4)) &gt;= starting_year)\n  # if title keywords are specified, we will use str_detect to find look through and filter the titles.\n  return(filtered)}\n}\n\nWe will test our function by accessing the API used before.\n\naccess(url_id = \"https://newsapi.org/v2/top-headlines?country=us&category=business&apiKey=d042b6702b44494f8531596ad64cf58c\")\n\n# A tibble: 20 × 8\n   source$id $name author title description url   urlToImage publishedAt content\n   &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n 1 &lt;NA&gt;      [Rem… &lt;NA&gt;   \"[Re… \"[Removed]\" http… &lt;NA&gt;       1970-01-01… \"[Remo…\n 2 associat… Asso… WYATT… \"Car… \"Car deale… http… https://d… 2024-06-24… \"NEW Y…\n 3 &lt;NA&gt;      Decr… Ryan … \"Bit… \"As Mt. Go… http… https://c… 2024-06-24… \"Bitco…\n 4 &lt;NA&gt;      Fox … Aisli… \"San… \"The 3,200… http… https://a… 2024-06-24… \"A hom…\n 5 &lt;NA&gt;      Airb… https… \"Air… \"Airbus SE… http… https://w… 2024-06-24… \"&lt;ul&gt;&lt;…\n 6 &lt;NA&gt;      [Rem… &lt;NA&gt;   \"[Re… \"[Removed]\" http… &lt;NA&gt;       1970-01-01… \"[Remo…\n 7 &lt;NA&gt;      New … Ariel… \"Mil… \"Jonathan … http… https://n… 2024-06-24… \"The m…\n 8 cnn       CNN   Jorda… \"Hoo… \"Hooters i… http… https://m… 2024-06-24… \"Hoote…\n 9 &lt;NA&gt;      TheS… TheSt… \"Ana…  &lt;NA&gt;       http… &lt;NA&gt;       2024-06-24…  &lt;NA&gt;  \n10 bloomberg Bloo… &lt;NA&gt;   \"Fun…  &lt;NA&gt;       http… &lt;NA&gt;       2024-06-24… \"To co…\n11 the-wall… The … The W… \"Mee…  &lt;NA&gt;       http… &lt;NA&gt;       2024-06-24…  &lt;NA&gt;  \n12 &lt;NA&gt;      CNBC  Morga… \"Eli… \"The Inves… http… https://i… 2024-06-24…  &lt;NA&gt;  \n13 &lt;NA&gt;      Inve… Timot… \"Nvi… \"AI chipma… http… https://w… 2024-06-24… \"UPDAT…\n14 &lt;NA&gt;      TheS… TheSt… \"Nvi…  &lt;NA&gt;       http… &lt;NA&gt;       2024-06-24…  &lt;NA&gt;  \n15 &lt;NA&gt;      mliv… Brand… \"Ama… \"Some may … http… https://w… 2024-06-24…  &lt;NA&gt;  \n16 &lt;NA&gt;      Fox … Danie… \"Can… \"Snapchill… http… https://a… 2024-06-24… \"A Wis…\n17 &lt;NA&gt;      Fox … Krist… \"Out… \"Despite s… http… https://a… 2024-06-24… \"After…\n18 &lt;NA&gt;      CNBC  Morga… \"29-… \"In her ea… http… https://i… 2024-06-24… \"Hanna…\n19 reuters   Reut… Kane … \"Fas… \"Shein con… http… https://w… 2024-06-24…  &lt;NA&gt;  \n20 google-n… Goog… CNBC   \"Tru…  &lt;NA&gt;       http… &lt;NA&gt;       2024-06-24…  &lt;NA&gt;  \n\n\nNow, we will test it by specifying keywords to select different articles.\n\naccess(url_id = \"https://newsapi.org/v2/top-headlines?country=us&category=business&apiKey=d042b6702b44494f8531596ad64cf58c\", \n       title_keywords = c(\"hedge\", \"prime day\"))\n\n# A tibble: 0 × 8\n# ℹ 8 variables: source &lt;df[,2]&gt;, author &lt;chr&gt;, title &lt;chr&gt;, description &lt;chr&gt;,\n#   url &lt;chr&gt;, urlToImage &lt;chr&gt;, publishedAt &lt;chr&gt;, content &lt;chr&gt;\n\n\nNow, lets try testing it by accessing a different link.\n\naccess(url_id = \"https://newsapi.org/v2/top-headlines?sources=techcrunch&apiKey=d042b6702b44494f8531596ad64cf58c\")\n\n# A tibble: 10 × 8\n   source$id $name author title description url   urlToImage publishedAt content\n   &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n 1 techcrun… Tech… Laure… Bye-… Autonomous… http… https://t… 2024-05-08… \"Auton…\n 2 techcrun… Tech… Alex … $450… This morni… http… https://t… 2024-05-08… \"Good …\n 3 techcrun… Tech… Alex … Watc… Would you … http… https://t… 2024-05-08… \"Apple…\n 4 techcrun… Tech… Rebec… Uber… Uber plans… http… https://t… 2024-05-08… \"Uber …\n 5 techcrun… Tech… Mike … Chec… Checkfirst… http… https://t… 2024-05-08… \"Weve …\n 6 techcrun… Tech… Paul … UK c… Monzo has … http… https://t… 2024-05-08… \"Monzo…\n 7 techcrun… Tech… Brian… iRob… iRobot Tue… http… https://t… 2024-05-08… \"iRobo…\n 8 techcrun… Tech… Devin… Goog… Google Dee… http… https://t… 2024-05-07… \"Googl…\n 9 techcrun… Tech… Tim D… Myco… The startu… http… https://t… 2024-05-07… \"Usual…\n10 techcrun… Tech… Kyle … Cont… Xtend, a d… http… https://t… 2024-05-07… \"Close…\n\n\nUsing this link, we are able to specify different keywords and select only from the recent year.\n\naccess(url_id = \"https://newsapi.org/v2/top-headlines?sources=techcrunch&apiKey=d042b6702b44494f8531596ad64cf58c\", \n       title_keywords = c(\"uber one\", \"crypto\", \"macbooks\"), \n       starting_year = 2024)\n\n# A tibble: 3 × 8\n  source$id  $name author title description url   urlToImage publishedAt content\n  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n1 techcrunch Tech… Alex … $450… This morni… http… https://t… 2024-05-08… \"Good …\n2 techcrunch Tech… Alex … Watc… Would you … http… https://t… 2024-05-08… \"Apple…\n3 techcrunch Tech… Rebec… Uber… Uber plans… http… https://t… 2024-05-08… \"Uber …"
  }
]