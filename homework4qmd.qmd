---
title: "Homework 4 - ST558 "
author: "Sam O'Ferrell"
format: html
editor: visual
execute:
  error: TRUE
---

In this document, we will be writing functions and dealing with missing values. We will start by answering conceptual questions about this weeks lecture material.

## Task 1: Conceptual Questions

What is the purpose of the lapply() function? What is the equivalent purrr function?

> The purpose of the lapply() function is to apply a function to each element in a list. The equivalent purrr function is the map() function

Suppose we have a list called my_list. Each element of the list is a numeric data frame (all columns are numeric). We want use lapply() to run the code cor(numeric_matrix, method = "kendall") on each element of the list. Write code to do this below! (I’m really trying to ask you how you specify method = "kendall" when calling lapply())

> lapply(numeric_namtrix = my_list, method = "kendall")

What are two advantages of using purrr functions instead of the BaseR apply family?

> The purrr functions have common function names and syntax across functions.

What is a side-effect function?

> A side-effect function is a function that doesn't change anything it just creates output.

Why can you name a variable sd in a function and not cause any issues with the sd function?

> Inside the function when we call it, there is a temporary function environment which is then destroyed after running the function.

## Task 2: Writing R Functions

First, we will write a function that finds the RMSE of a response vector and a respective predictions vector.

```{r}
# I will be adding ... into the function to apply other arguments after the fact. 
getRMSE <- function(responses, predictions,...){
  RMSE <- sqrt(mean((responses - predictions)^2,...))
  return(RMSE)
}
```

Now, I will test the function after creating data with no missing values.

```{r}
set.seed(10)
n <- 100
x <- runif(n)
resp <- 3 + 10*x + rnorm(n)
pred <- predict(lm(resp ~ x), data.frame(x))
getRMSE(responses = resp, predictions = pred)
```

Now, I will test the function after creating a vector "resp_NA" which contains missing values.

```{r}
resp_NA <- c(resp[1:98],NA_real_,NA_real_)
# First we will apply the function without removing the missing values to verify an error. 
getRMSE(responses = resp_NA, predictions = pred)
# Then we will apply the function with specifying, na.rm = TRUE to remove the missing values.
getRMSE(responses = resp_NA, predictions = pred, na.rm = TRUE)
```

Now we will be writing a function to calculate the MAE of a response vector and a respective predictions vector.

```{r}
# I will be adding ... into the function to apply other arguments after the fact. 
getMAE <- function(responses, predictions, ...){
  RMSE <- mean(abs(responses - predictions),...)
  return(RMSE)
}
```

Now I will test the getMAE function:

```{r}
getMAE(responses = resp, predictions = pred)
```

Now I will test the getMAE function with missing data.

```{r}
# First we will apply the function without removing the missing values to verify an error. 
getMAE(responses = resp_NA, predictions = pred)
# Then we will apply the function with specifying, na.rm = TRUE to remove the missing values.
getMAE(responses = resp_NA, predictions = pred, na.rm = TRUE)
```

Now, we will create a wrapper function that calculates the RMSE and/or MAE.

```{r}
my_wrapper <- function(responses, predictions, get = "both"){
  # First we will combine the vectors to more efficiently check for missing/incorrect data.
  both_vectors <- c(responses, predictions)
  
  # We will create a vector of logical objects from checking if the vectors 
  # are numerical, vectors, atomic, or missing.
   if (FALSE %in% c(is.numeric(both_vectors), 
                    is.vector(both_vectors), 
                    is.atomic(both_vectors), 
                    !is.na(both_vectors))) {
    stop("Input must be an atomic numeric vector, with no missing values.")}
  
RMSE <- getRMSE(responses, predictions)
MAE <- getMAE(responses, predictions)

# I will use my local get object to pull any specific calculations.
  if (get == "both"){
  return(list("Root Mean Square Error" = RMSE, "Mean Absolute Deviation" = MAE))}
    else if (get == "RMSE"){
    return(list("Root Mean Square Error" = RMSE))}
      else if (get == "MAE"){
      return(list("Mean Absolute Deviation" = MAE))}
        else 
          {stop("For 'get' argument, specify RMSE, MAE, or both")}
  }
```

Now, we will test the wrapper function. - First, we will test by calling for each metric individually.

```{r}
my_wrapper(resp, pred, "RMSE")
my_wrapper(resp, pred, "MAE")
```

-   Now, we will apply the function specifying both metrics to be returned:

```{r}
my_wrapper(resp,pred, "both")
```

-   Now we will repeat with a vector containing missing values.

```{r}
my_wrapper(resp_NA, pred)
```

-   Now we will apply the function to the incorrect data object (a data frame):

```{r}
resp_data_frame <- data.frame(resp)
my_wrapper(resp_data_frame, pred)
```

## Task 3: Querying an API and a Tidy-Style Function

1.  Use GET() from the httr package to return information about a topic that you are interested in that has been in the news lately (store the result as an R object). Note: We can only look 30 days into the past with a free account.

```{r}
url_id <- "https://newsapi.org/v2/top-headlines?country=us&category=business&apiKey=d042b6702b44494f8531596ad64cf58c"
id_info <- httr::GET(url_id)
str(id_info, max.level = 1)
```

2.  Now we will parse what is returned and find our way to the data frame that has the actual article information in it.

```{r}
library(jsonlite)
parsed <- fromJSON(rawToChar(id_info$content))
headline_info <- tibble::as_tibble(parsed$articles)
```

3.  Now we will write a quick function that allows the user to easily query this API. The inputs to the function should be the title/subject to search for (string), a time period to search from (string - you’ll search from that time until the present), and an API key.

```{r}
library(tidyverse)
library(purrr)
```

This function will take in an api_key, a title, and a time, and return a parsed data set as a tibble.
```{r}
access_function <- function(api_key, title, time){
  url_start <- "https://newsapi.org/v2/everything?q="
  url_full <- paste(url_start, 
                    title, "&from=",
                    time,
                    "&apiKey=",
                    api_key,
                    sep ="")
  id_info <- httr::GET(url_full)
  parsed <- fromJSON(rawToChar(id_info$content))
  headline_info <- tibble::as_tibble(parsed$articles)
  
  return(headline_info)
}
```

We will test our function by using our api key and specifying articles about cars from 2024-06-01.
```{r}
cars <- access_function(api_key = "d042b6702b44494f8531596ad64cf58c",
        title = "cars",
        time = "2024-06-01")
cars
```

Now, we will test it again using our api key and specifying articles about chess from 2024-06-15.
```{r}
chess <- access_function(api_key = "d042b6702b44494f8531596ad64cf58c",
         title = "chess",
         time = "2024-06-15")
chess
```
